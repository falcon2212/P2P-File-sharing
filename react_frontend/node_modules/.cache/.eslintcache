[{"/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/index.js":"1","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/App.js":"2","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/Tmp.js":"3","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Header.js":"4","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Middle.js":"5","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Home.js":"6","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/About.js":"7","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Dashboard.js":"8","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/RoomSelect.js":"9","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Login.js":"10","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Authors.js":"11","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/SignUp.js":"12","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/config/app_config.js":"13","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/DeviceSelection.js":"14"},{"size":412,"mtime":1620923971208,"results":"15","hashOfConfig":"16"},{"size":3646,"mtime":1620923971208,"results":"17","hashOfConfig":"16"},{"size":820,"mtime":1620923971208,"results":"18","hashOfConfig":"16"},{"size":5489,"mtime":1620923971208,"results":"19","hashOfConfig":"16"},{"size":1835,"mtime":1620923971208,"results":"20","hashOfConfig":"16"},{"size":724,"mtime":1620923971208,"results":"21","hashOfConfig":"16"},{"size":3212,"mtime":1620923971208,"results":"22","hashOfConfig":"16"},{"size":12847,"mtime":1620967325407,"results":"23","hashOfConfig":"16"},{"size":1540,"mtime":1620923971208,"results":"24","hashOfConfig":"16"},{"size":3947,"mtime":1620923971208,"results":"25","hashOfConfig":"16"},{"size":1829,"mtime":1620923971208,"results":"26","hashOfConfig":"16"},{"size":4666,"mtime":1620923971208,"results":"27","hashOfConfig":"16"},{"size":239,"mtime":1621099701173,"results":"28","hashOfConfig":"16"},{"size":4442,"mtime":1621097992880,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"cg2v87",{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"33"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"33"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"33"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/index.js",["70"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n// import {Route, Router} from \"react-router\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport { App } from \"./App\";\nimport {Tmp} from \"./Tmp\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n            {/*<Tmp/>*/}\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n",["71","72"],"/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/App.js",["73","74"],"import React, { Component } from 'react';\nimport {\n    Switch,\n    Route,\n    useParams,\n    useRouteMatch\n} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Header } from \"./components/Header\";\nimport {Middle} from \"./components/Middle\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            logged_in: false,\n            login_credentials : {},\n            device:null,\n            room: null,\n            // middle_content: \"home\"\n        };\n        this.handleReq = this.handleReq.bind(this);\n        this.handleRoomChange = this.handleRoomChange.bind(this);\n    }\n\n    handleReq(ls, lc) {\n        this.setState({logged_in: ls, login_credentials: lc});\n        // this.render();\n    }\n\n    handleDeviceChange(d){\n        this.setState({device: d})\n    }\n\n    handleRoomChange(r) {\n        this.setState({room: r});\n    }\n\n    render() {\n        return(\n            <div>\n                {/*<Header logged_in={this.state.logged_in}/>*/}\n                {/*<Middle middle_content={\"home\"}/>*/}\n                <Switch>\n                    <Route exact path={\"/\"}>\n                        {/*<Header logged_in={this.state.logged_in} onReq={(mc) => this.handleReq(this.state.logged_in,mc)}/>*/}\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"home\"}/>\n                    </Route>\n                    <Route path={\"/about\"}>\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"about\"}/>\n                    </Route>\n                    <Route path={\"/authors\"}>\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"authors\"}/>\n                    </Route>\n                    <Route path={\"/login\"}>\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"login\"} onReq={(ls, lc) => this.handleReq(ls, lc)} onRoomChange={(r) => this.handleRoomChange(r)}/>\n                    </Route>\n                    <Route path={\"/sign_up\"}>\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"sign_up\"} onReq={(ls, lc) => this.handleReq(ls, lc)} onRoomChange={(r) => this.handleRoomChange(r)}/>\n                    </Route>\n                    <Route path={\"/dashboard\"}>\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"dashboard\"} login_data={this.state}/>\n                    </Route>\n                    <Route path={\"/room_select\"}>\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"room_select\"} onRoomChange={(r) => this.handleRoomChange(r)}/>\n                    </Route>\n                    <Route path={\"/device_select\"}>\n                        <Header login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)}/>\n                        <Middle middle_content={\"device_select\"} login_data={this.state} onReq={(ls, lc) => this.handleReq(ls, lc)} onDeviceChange={(d) => this.handleDeviceChange(d)} onRoomChange={(r) => this.handleRoomChange(r)}/>\n                    </Route>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport { App };","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/Tmp.js",[],"/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Header.js",["75","76"],"import React, { Component } from \"react\";\nimport {Button, Container, Image, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\nimport {LinkContainer} from 'react-router-bootstrap';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./headers.css\";\n\nclass Header extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         logged_in: props.logged_in\n    //     };\n    // }\n\n    render() {\n        let header;\n        if (!this.props.login_data.logged_in) {\n            header = (\n                <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky={\"top\"}>\n                    <LinkContainer to={\"/\"}>\n                        <Navbar.Brand>P2P</Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <LinkContainer to={\"/\"}>\n                                {/*<Nav.Link eventKey={\"home\"} onSelect={()=>this.props.onReq(\"home\")}>Home</Nav.Link>*/}\n                                <Nav.Link eventKey={\"home\"}>Home</Nav.Link>\n                            </LinkContainer>\n                            <LinkContainer to={\"/about\"}>\n                                {/*<Nav.Link eventKey={\"faq\"} onSelect={()=>this.props.onReq(\"faq\")}>FAQs</Nav.Link>*/}\n                                <Nav.Link eventKey={\"about\"}>About</Nav.Link>\n                            </LinkContainer>\n                            <LinkContainer to={\"/authors\"}>\n                                {/*<Nav.Link eventKey={\"about\"} onSelect={()=>this.props.onReq(\"about\")}>Authors</Nav.Link>*/}\n                                <Nav.Link eventKey={\"authors\"}>Authors</Nav.Link>\n                            </LinkContainer>\n                        </Nav>\n                        <Nav fill={true} className=\"justify-content-end\">\n                            <LinkContainer to={\"/login\"}>\n                                {/*<Button variant={\"outline-primary\"} onClick={()=>this.props.onReq(\"login\")}>Login</Button>*/}\n                                <Button variant={\"outline-primary\"}>Login</Button>\n                            </LinkContainer>\n                            <LinkContainer to={\"/sign_up\"}>\n                                {/*<Button variant={\"primary\"} onClick={()=>this.props.onReq(\"sign_up\")}>Sign-up</Button>*/}\n                                <Button variant={\"primary\"}>Sign-up</Button>\n                            </LinkContainer>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            );\n        }\n        else{\n            header = (\n                <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky={\"top\"}>\n                    {/*<Container fluid={true}>*/}\n                        <LinkContainer to={\"/\"}>\n                            <Navbar.Brand>P2P</Navbar.Brand>\n                        </LinkContainer>\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\n                            <Nav defaultActiveKey={\"home\"} className=\"mr-auto\">\n                                <LinkContainer to={\"/\"}>\n                                    {/*<Nav.Link eventKey={\"home\"} onSelect={()=>this.props.onReq(\"home\")}>Home</Nav.Link>*/}\n                                    <Nav.Link eventKey={\"home\"}>Home</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer to={\"/about\"}>\n                                    {/*<Nav.Link eventKey={\"faq\"} onSelect={()=>this.props.onReq(\"faq\")}>FAQs</Nav.Link>*/}\n                                    <Nav.Link eventKey={\"about\"}>About</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer to={\"/authors\"}>\n                                    {/*<Nav.Link eventKey={\"about\"} onSelect={()=>this.props.onReq(\"about\")}>Authors</Nav.Link>*/}\n                                    <Nav.Link eventKey={\"authors\"}>Authors</Nav.Link>\n                                </LinkContainer>\n                                <LinkContainer to={\"/dashboard\"}>\n                                    {/*<Nav.Link eventKey={\"about\"} onSelect={()=>this.props.onReq(\"about\")}>Authors</Nav.Link>*/}\n                                    <Nav.Link eventKey={\"dashboard\"}>Dashboard</Nav.Link>\n                                </LinkContainer>\n                            </Nav>\n                            <Nav fill={true} className={\"justify-content-end\"}>\n                                <NavDropdown eventKey={1} id=\"basic-nav-dropdown\" drop={\"down\"}\n                                title= {this.props.login_data.login_credentials.username}\n                                >\n\n                                    <NavDropdown.Item eventKey={1.1} href=\"#profile\">Profile</NavDropdown.Item>\n                                    <NavDropdown.Item eventKey={1.2} href={\"/\"} onClick={()=>this.props.onReq(\"false\",null)}>\n                                        Logout\n                                    </NavDropdown.Item>\n                                </NavDropdown>\n                            </Nav>\n                        </Navbar.Collapse>\n                    {/*</Container>*/}\n                </Navbar>\n            );\n        }\n        return (\n            header\n        );\n    }\n}\n\nexport { Header };","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Middle.js",[],"/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Home.js",["77","78"],"import React, { useState, useEffect, Component } from \"react\";\nimport {Button, Jumbotron} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <Jumbotron>\n                <h1>P2P file sharing</h1>\n                <p>\n                    This is a peer to peer file sharing app, intending to act as a medium to share files amongst personal devices.\n                </p>\n                <p>\n                    <LinkContainer to={\"/about\"}>\n                        <Button variant=\"info\">Learn more</Button>\n                    </LinkContainer>\n                </p>\n            </Jumbotron>\n        );\n    }\n}\n\nexport {Home};","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/About.js",["79","80"],"import React, { useState, useEffect, Component } from \"react\";\nimport {Col, ListGroup, Nav, Row, Tab} from 'react-bootstrap'\nimport \"./dashboard.css\";\nimport {Github} from \"react-bootstrap-icons\";\n\nclass About extends Component {\n    render() {\n        return (\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n                <Row>\n                    <Col sm={3}>\n                        <Nav variant=\"pills\" className=\"flex-column\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"first\">App</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"second\">Tools</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col sm={9}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"first\">\n                                <p1>\n                                    This is a peer to peer file sharing app, intending to act as a medium to share files amongst personal devices\n                                    <Github href={\"https://github.com/falcon2212/window-drop\"} />\n                                </p1>\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"second\">\n                                <h1>Frontend</h1>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item><b>React.js</b> framework</ListGroup.Item>\n                                    <ListGroup.Item><b>react-bootstrap</b> components</ListGroup.Item>\n                                    <ListGroup.Item><b>socket.io-client</b> for client side event handling</ListGroup.Item>\n                                </ListGroup>\n                                <h1>Backend</h1>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item><b>Node.js</b>+<b>Express</b> framework</ListGroup.Item>\n                                    <ListGroup.Item><b>socket.io</b> for event handling over network</ListGroup.Item>\n                                    <ListGroup.Item><b>WebRTC</b> for peer communication</ListGroup.Item>\n                                    <ListGroup.Item><b>Mongoose</b> for user management</ListGroup.Item>\n                                </ListGroup>\n                                <h1>DevOps</h1>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item><b>WebStorm</b>, <b>VisualStudio</b> IDEs</ListGroup.Item>\n                                    <ListGroup.Item><b>GitHub Actions</b> for CI/CD</ListGroup.Item>\n                                    <ListGroup.Item><b>Docker</b> for containerization</ListGroup.Item>\n                                    <ListGroup.Item><b>Azure</b> for deploying the app</ListGroup.Item>\n                                </ListGroup>\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport {About};\n\n\n\n","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Dashboard.js",["81","82","83","84","85","86","87","88"],"import React, { useState, useEffect, Component } from \"react\";\nimport \"./dashboard.css\";\nimport socketIOClient from \"socket.io-client\";\nimport {Button, Col, Container, FormFile, ListGroup, Row} from \"react-bootstrap\";\nimport {ArrowUpSquareFill} from \"react-bootstrap-icons\";\n\nconst MAXIMUM_MESSAGE_SIZE = 65535;\nconst END_OF_FILE_MESSAGE = 'EOF';\nconst {arrayBufferWithMime,arrayBufferMimeDecouple} = require('arraybuffer-mime');\nconst arrayBufferConcat = require('arraybuffer-concat')\n\nlet APP_CONFIG = require(\"../config/app_config\");\nconst ENDPOINT = APP_CONFIG.BACKEND_ENDPOINT;\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            configuration : {\n                'iceServers': [{\n                    'urls': 'stun:stun.l.google.com:19302'\n                }]\n            },\n            room:null,\n            chunks : [],\n            clientList: [],\n            isInitiator: null,\n            clientId: null,\n            dest_id: null,\n            dataChannel: null,\n            connections : {},\n            datachannels : {},\n            online: null,\n            memberList: [],\n            file:null,\n            socket:null,\n            downloadList:null,\n            usernames:{},\n        };\n    }\n\n    renderClients (){\n        var onlineUsers = ((this.state.clientList.length === 0) ? 0 : (this.state.clientList.length - 1) );\n\n        this.setState({online: onlineUsers});\n\n        var html = [];\n        if(this.state.clientList.length === 1)\n        {\n            this.setState({memberList: html});\n            return;\n        }\n\n        for(var i=0; i<this.state.clientList.length; i++)\n        {\n            var element = this.state.clientList[i];\n            if(element === this.state.clientId) continue;\n            html.push(element);\n            this.setState({memberList: html});\n\n        }\n    }\n\n    allConnect (){\n        this.setState({connections: {}});\n        this.setState({datachannels: {}});\n        for(let i = 0;i<this.state.clientList.length;i++){\n            var element = this.state.clientList[i];\n            if(element === this.state.clientId) continue;\n            this.sendConnect(element);\n        }\n    }\n\n    async sendConnect (id){\n        this.setState({dest_id: id});\n        this.setState({isInitiator: true});\n        this.state.socket.emit('sendConnect', this.state.dest_id, this.state.clientId, this.state.room, this.props.login_data.device);\n        return true;\n    }\n\n    t(){\n        console.log(Date.now());\n    }\n\n    createPeer(id){\n\n        //var connect = document.getElementById('connect');\n        //connect.style.display = 'block';\n\n        let tmp = this.state.connections;\n        let tmp1 = this.state.datachannels;\n        tmp[id] = new RTCPeerConnection(this.state.configuration);\n\n        tmp[id].onicecandidate = (event) => {\n            if (event.candidate) {\n                this.sendMessage({\n                    type: 'candidate',\n                    label: event.candidate.sdpMLineIndex,\n                    id: event.candidate.sdpMid,\n                    candidate: event.candidate.candidate\n                },id);\n            } else {\n            }\n        };\n        this.setState({connections:tmp});\n\n        if (this.state.isInitiator) {\n            tmp1[id] = this.state.connections[id].createDataChannel('files');\n            tmp1[id].binaryType = 'arraybuffer';\n            this.setState({datachannels: tmp1});\n            this.onDataChannelCreated(id);\n\n            this.state.connections[id].createOffer().then((offer) => {\n                return this.state.connections[id].setLocalDescription(offer);\n            })\n                .then(() => {\n                    this.sendMessage(this.state.connections[id].localDescription, id);\n                })\n                .catch(this.logError);\n\n        } else {\n            tmp[id].ondatachannel = (event) => {\n                tmp1[id] = event.channel;\n                tmp1[id].binaryType = 'arraybuffer';\n                this.setState({datachannels: tmp1});\n                this.onDataChannelCreated(id);\n            };\n            this.setState({connections:tmp});\n        }\n    }\n\n    sendMessage (message, id) {\n        this.state.socket.emit('message', message, id, this.state.clientId);\n    }\n\n    onDataChannelCreated (id){\n\n        let channel = this.state.datachannels;\n        channel[id].onopen = () => {\n        };\n\n        channel[id].onclose = () => {\n            // currentState.sendBtn = false;\n        }\n\n        channel[id].onmessage = async (event) => {\n            const { data } = event;\n            try {\n                if (data !== END_OF_FILE_MESSAGE) {\n                    var tmp = this.state.chunks;\n                    tmp.push(data);\n                    this.setState({chunks:tmp});\n                } else {\n                    let abWithMime = this.state.chunks.reduce((acc, arrayBuffer) => {\n                        const tmp = new Uint8Array(acc.byteLength + arrayBuffer.byteLength);\n                        tmp.set(new Uint8Array(acc), 0);\n                        tmp.set(new Uint8Array(arrayBuffer), acc.byteLength);\n                        return tmp;\n                    }, new Uint8Array());\n                    const {mime, arrayBuffer} = arrayBufferMimeDecouple(abWithMime)\n                    const blob = new Blob([arrayBuffer], {type : mime});\n                    this.render1(blob, \"download\");\n                    //channel.close();\n                }\n            } catch (err) {\n            }\n        };\n        this.setState({datachannels: channel});\n    };\n\n    logError (err) {\n        if (!err) return;\n        if (typeof err === 'string') {\n            console.warn(err);\n        } else {\n            console.warn(err.toString(), err);\n        }\n    }\n\n    render1 (blob, fileName){\n        var html;\n        const url = window.URL.createObjectURL(blob);\n        if(url)\n        {\n            html = <li><small><a href={url} download={fileName}>Incoming file</a></small></li> ;\n        }\n        else\n        {\n            html = <li>No files available here</li>;\n        }\n        this.setState({downloadList: html});\n        this.setState({chunks: []});\n    }\n\n    signalingMessageCallback (message, id) {\n        if (message.type === 'offer') {\n            this.state.connections[id].setRemoteDescription(new RTCSessionDescription(message), () => {},\n                this.logError);\n            this.state.connections[id].createAnswer().then((answer) => {\n                this.onLocalSessionCreated(answer,id);\n            }).catch(this.logError);\n        } else if (message.type === 'answer') {\n            this.state.connections[id].setRemoteDescription(new RTCSessionDescription(message), () => {},\n                this.logError);\n        } else if (message.type === 'candidate') {\n            this.state.connections[id].addIceCandidate(new RTCIceCandidate({\n                candidate: message.candidate,\n                sdpMLineIndex: message.label,\n                sdpMid: message.id\n            }));\n        }\n    }\n\n    onLocalSessionCreated (desc,id) {\n        this.state.connections[id].setLocalDescription(desc).then(() => {\n            this.sendMessage(this.state.connections[id].localDescription, id);\n        }).catch(this.logError);\n    }\n\n    async sendFile(ev){\n        let id = ev.target.value;\n        // for(var i=0; i<this.state.clientList.length; i++){\n        //     if(this.state.clientId === this.state.clientList[i]) continue;\n        //     else{\n        //         id = this.state.clientList[i];\n        //     }\n        // }\n        // var id = element.getAttribute(\"id\");\n        // var fileInput = document.getElementById('file')\n        var file = this.state.file;\n\n        if(file){\n            let arrayBuffer = await file.arrayBuffer();\n            let mime = file.type;\n            let abWithMime = arrayBufferWithMime(arrayBuffer, mime)\n            let dataChannel = this.state.datachannels[id];\n\n            for (let i = 0; i < abWithMime.byteLength; i += MAXIMUM_MESSAGE_SIZE) {\n                dataChannel.send(abWithMime.slice(i, i + MAXIMUM_MESSAGE_SIZE));\n            }\n            dataChannel.send(END_OF_FILE_MESSAGE);\n        }\n    }\n\n    arrayBufferWithMime(arrayBuffer, mime) {\n        const len = mime.length\n        const uint8 = new Uint8Array(len + 1)\n\n        uint8[0] = len\n\n        for (var i = 0; i < len; i++) {\n            var n = mime[i].charCodeAt(0)\n            uint8[i+1] = n\n        }\n\n        const ab = arrayBufferConcat(uint8, arrayBuffer)\n\n        return ab\n    }\n\n    arrayBufferMimeDecouple(arrayBufferWithMime) {\n        const uint8 = new Uint8Array(arrayBufferWithMime)\n        var mime = ''\n        const len = uint8[0]\n\n        for (var i = 0; i < len; i++) {\n            var char = uint8[i+1]\n\n            mime += String.fromCharCode(char)\n        }\n\n        var arrayBuffer = uint8.slice(len+1).buffer\n\n        return {\n            mime: mime,\n            arrayBuffer: arrayBuffer\n        }\n    }\n\n    componentDidMount() {\n        console.log(this.props.login_data.room)\n        if (this.props.login_data.room !== null) {\n            this.state.room = window.location.hash = this.props.login_data.room;\n        }\n        else {\n            this.state.room = window.location.hash = \"1\";\n        }\n\n        this.state.socket = socketIOClient.connect(ENDPOINT, {reconnect: true});\n\n        this.state.socket.emit('create or join', this.state.room);\n\n        this.state.socket.on('Display clients', (clientsInRoom, isAllConnect) => {\n            this.setState({clientList: clientsInRoom});\n            this.renderClients();\n            if(isAllConnect) this.allConnect();\n        });\n\n        this.state.socket.on('ready', (dest_Id, username) => {\n\n            let users = this.state.usernames;\n            users[dest_Id] = username;\n            this.setState({usernames: users});\n\n            this.t();\n            this.createPeer(dest_Id);\n            this.t();\n        });\n\n        this.state.socket.on('reset', () => {\n            window.location.reload();\n        });\n\n        this.state.socket.on('sendConnect', (dest_Id, username) => {\n\n            let users = this.state.usernames;\n            users[dest_Id] = username;\n            this.setState({usernames: users});\n\n            this.setState({dest_id: dest_Id});\n            this.setState({isInitiator: false});\n            this.t();\n            this.createPeer(this.state.dest_id);\n            this.t();\n            this.state.socket.emit('ready', this.state.dest_id, this.state.clientId, this.props.login_data.device);\n            return true;\n        });\n\n        this.state.socket.on('socketid', (id) => {\n            this.setState({clientId: id});\n        });\n\n        this.state.socket.on('log', (array) => {\n        });\n\n        this.state.socket.on('message', (message, id) => {\n            this.signalingMessageCallback(message, id);\n        });\n    }\n\n    componentWillUnmount() {\n        this.state.socket.emit('final_step', this.state.room);\n    }\n\n    addFile(event){\n        this.setState({file: event.target.files[0]});\n    }\n\n    tmp = (event) => {\n    }\n    createUserList() {\n        let html = [];\n        for(var i=0; i<this.state.memberList.length; i++){\n            html.push(\n                <ListGroup.Item>\n                    {this.state.usernames[this.state.memberList[i]]}<Button value={this.state.memberList[i]} onClick={(ev) => this.sendFile(ev)}>Send file</Button>\n                    {/*<Row className={\"p-2\"}>*/}\n                    {/*    <Col>{this.state.memberList[i]}</Col>*/}\n                    {/*    /!*<Col><Form.File onChange={(e) => {this.addFile(e)}} type={\"file\"} className={\"custom-file-label\"} label={this.state.memberList[i]} custom/></Col>*!/*/}\n                    {/*    <Col className={\"justify-content-end\"}><Button value={this.state.memberList[i]} onClick={(ev) => this.sendFile(ev.target.value)}/></Col>*/}\n                    {/*</Row>*/}\n                </ListGroup.Item>\n            );\n        }\n        return html;\n    }\n\n    render() {\n        let userList = this.createUserList();\n        return(\n            <Container className={\"justify-content-center mb-5 mt-5\"}>\n                <div>\n                    Users online: {this.state.online}\n                </div>\n                <div>\n                    {/*<FormFile onChange={(e) => {this.addFile(e)}} type={\"file\"} className={\"custom-file-label\"} label={\"Select file\"} custom/>*/}\n                    <FormFile onChange={(e) => {this.addFile(e)}} type={\"file\"} data-browse={\"Select file\"}/>\n                    <ul id=\"downloadList\">{this.state.downloadList}</ul>\n                </div>\n                <ListGroup>\n                    {userList}\n                </ListGroup>\n            </Container>\n        );\n    }\n}\n\nexport {Dashboard};\n\n","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/RoomSelect.js",["89","90","91"],"import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Login.css\"\nimport {Button, Form} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {Redirect} from \"react-router\";\n\nlet APP_CONFIG = require(\"../config/app_config\");\nconst ENDPOINT = APP_CONFIG.BACKEND_ENDPOINT;\n\nclass RoomSelect extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            room: null,\n        };\n\n        // this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.state.room = null;\n    }\n\n    handleChange(event){\n        let fieldName = event.target.name;\n        let fieldVal = event.target.value;\n        this.setState({[fieldName]: fieldVal});\n        this.props.onRoomChange(fieldVal);\n    }\n\n    render() {\n            return (\n                <Form className={\"form-global\"}>\n                    <h3>Room select</h3>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Room number</Form.Label>\n                        <Form.Control type={\"text\"} name={\"room\"}\n                                      onChange={this.handleChange.bind(this)}/>\n                    </Form.Group>\n\n                    <LinkContainer to={\"/dashboard\"}>\n                        <Button variant=\"primary\">\n                            Submit\n                        </Button>\n                    </LinkContainer>\n                </Form>\n            );\n    }\n}\n\n\nexport {RoomSelect};","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Login.js",["92","93","94","95"],"import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Login.css\"\nimport {Button, Form} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {Redirect} from \"react-router\";\n\nlet APP_CONFIG = require(\"../config/app_config\");\nconst ENDPOINT = APP_CONFIG.BACKEND_ENDPOINT;\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            error: null,\n            username: \"\",\n            password: \"\",\n            name: \"\"\n        };\n\n        // this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(ENDPOINT+\"start\")\n            .then(res => res.json())\n            .then((res) => {\n                this.setState({isLoaded: true,});\n            })\n            .catch((err)=>{\n                this.setState({isLoaded: true, error: err});\n                console.log(err);\n            });\n    }\n\n    handleSubmit() {\n        // <validate_user user={this.state} handleValid={(n)=>{this.setState({isLoaded: true, name: n})}/>\n        fetch(ENDPOINT+\"users/find\", {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({username: this.state.username, password: this.state.password})\n        })\n            .then(res => res.json())\n            .then(\n                res => {\n                    if(res === null){\n                        console.log(\"Username password do not match\");\n                        alert(\"username password do not match\");\n                    }\n                    else if (res.name !== \"\") {\n                        console.log(res);\n                        this.props.onReq(true, {username: this.state.username, name: res.name, user_id: res._id, devices: res.devices});\n                        this.props.onRoomChange(res.room);\n                        this.setState({name: res.name});\n                    }\n                })\n            .catch(\n                err => {\n                    console.log(err);\n                });\n    }\n\n    handleChange(event){\n        let fieldName = event.target.name;\n        let fieldVal = event.target.value;\n        this.setState({[fieldName]: fieldVal});\n    }\n\n    render() {\n        let { isLoaded, error, username, password, name} = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else if(name !== \"\"){\n            return <Redirect to={\"/device_select\"}/>;\n        }\n        else {\n            {/*TODO: isLoaded error handling*/}\n            return (\n                <Form className={\"form-global\"}>\n                    <h3>Login</h3>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Username</Form.Label>\n                        <Form.Control type={\"text\"} name={\"username\"}\n                                      onChange={this.handleChange.bind(this)}/>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" name={\"password\"}\n                                      onChange={this.handleChange.bind(this)}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Remember me\"/>\n                    </Form.Group>\n                    {/*<LinkContainer to={\"/\"}>*/}\n\n                    <Button variant=\"primary\" onClick={() => this.handleSubmit()}>\n                        Submit\n                    </Button>\n                    {/*</LinkContainer>*/}\n                    {/*<AfterSubmit name={this.state.name}/>*/}\n                </Form>\n            );\n        }\n    }\n}\n\n\nexport {Login};","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/Authors.js",["96"],"import React, { Component } from \"react\";\nimport {Col, ListGroup, Nav, Row, Tab} from 'react-bootstrap'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass Authors extends Component {\n    render() {\n        return (\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n                <Row>\n                    <Col sm={3}>\n                        <Nav variant=\"pills\" className=\"flex-column\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"first\">Srihari Vemuru</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"second\">Sushranth Hebbar</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"third\">Mohammad Khalid</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col sm={9}>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"first\">\n                                <h1>Role</h1>\n                                <p1>Frontend design, integration, network logic</p1>\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"second\">\n                                <h1>Role</h1>\n                                <p1>Backend, network logic</p1>\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"third\">\n                                <h1>Role</h1>\n                                <p1>DevOps tools</p1>\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Col>\n                </Row>\n            </Tab.Container>\n        );\n    }\n}\n\nexport {Authors};","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/SignUp.js",["97","98","99","100","101"],"import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Button, Col, Container, Form} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {Redirect} from \"react-router\";\n\nlet APP_CONFIG = require(\"../config/app_config\");\nconst ENDPOINT = APP_CONFIG.BACKEND_ENDPOINT;\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            isSubmitted: false,\n            error: null,\n            username: \"\",\n            password: \"\",\n            name: \"\",\n            email: \"\"\n        };\n    }\n\n    componentDidMount() {\n        fetch(ENDPOINT+\"start\")\n            .then(res => res.json())\n            .then((res) => {\n                this.setState({isLoaded: true,});\n            })\n            .catch((err)=>{\n                this.setState({isLoaded: true, error: err});\n                console.log(err);\n            });\n    }\n\n    handleSubmit() {\n        fetch(ENDPOINT+\"users/add\", {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({username: this.state.username, password: this.state.password, email: this.state.email, name: this.state.name})\n        })\n            .then(res => res.json())\n            .then(\n                res => {\n                    {/*TODO: username already exists condition*/}\n                    if(res === null){\n                        console.log(\"Username password do not match\");\n                        alert(\"username password do not match\");\n                    }\n                    else{\n                        console.log(res);\n                        this.props.onReq(true, {username: this.state.username, name: this.state.name, user_id: res._id, devices: []});\n                        this.props.onRoomChange(res.room);\n                        this.setState({isSubmitted: true});\n                    }\n                })\n            .catch(\n                err => {\n                    console.log(err);\n                }\n            );\n    }\n\n    handleChange(event){\n        let fieldName = event.target.name;\n        let fieldVal = event.target.value;\n        this.setState({[fieldName]: fieldVal});\n    }\n\n    render() {\n        let { isLoaded, isSubmitted, error, username, password, email} = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        }\n        else if(isSubmitted){\n            return <Redirect to={\"/device_select\"}/>;\n        }\n        else {\n            return (\n                <Container className={\"justify-content-center mb-5 mt-5\"}>\n                    <Form onSubmit={ () => this.handleSubmit()}>\n                        <Form.Group>\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control name={\"username\"} placeholder=\"For eg, brain_freeze, v-house\" onChange={this.handleChange.bind(this)}/>\n                        </Form.Group>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control name={\"email\"} type=\"email\" placeholder=\"Enter email\" onChange={this.handleChange.bind(this)}/>\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control name={\"password\"} type=\"password\" placeholder=\"Password\" onChange={this.handleChange.bind(this)}/>\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Group controlId=\"formGridFirstName\">\n                            <Form.Label>First name</Form.Label>\n                            <Form.Control name={\"name\"} onChange={this.handleChange.bind(this)}/>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formGridSecondName\">\n                            <Form.Label>Second name</Form.Label>\n                            <Form.Control/>\n                        </Form.Group>\n\n                        {/*<LinkContainer to={\"/\"}>*/}\n                        <Button variant=\"primary\" onClick={() => this.handleSubmit()}>\n                            Submit\n                        </Button>\n                        {/*</LinkContainer>*/}\n                    </Form>\n                </Container>\n            );\n        }\n    }\n}\n\nexport {SignUp};","/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/config/app_config.js",[],"/home/srihari/iiitb/sem_8/spe/final_project/window-drop/react_frontend/src/components/DeviceSelection.js",["102","103"],"import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./Login.css\"\nimport {Button, Form, ListGroup} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\nimport {Redirect} from \"react-router\";\n\nlet APP_CONFIG = require(\"../config/app_config\");\nconst ENDPOINT = APP_CONFIG.BACKEND_ENDPOINT;\n\nclass DeviceSelection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            device: null,\n            transaction:false,\n        };\n\n        // this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.state.device = null;\n    }\n\n    handleSubmit() {\n        let d = this.props.login_data.login_credentials.devices;\n        d.push(this.state.device);\n        fetch(ENDPOINT+\"users/update_devices/\"+this.props.login_data.login_credentials.user_id, {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({username: this.props.login_data.login_credentials.username, devices: d})\n        })\n            .then(res => res.json())\n            .then(\n                res => {\n                    if(res === null){\n                        console.log(\"Some issue\");\n                    }\n                    else {\n                        console.log(res);\n                        this.props.onReq(true, {username: res.username, name: res.name, user_id: res._id, devices: res.devices});\n                        this.props.onDeviceChange(this.state.device);\n                        this.setState({transaction: true});\n                    }\n                }\n            )\n            .catch(\n                err => {\n                    console.log(err);\n                });\n    }\n\n    handleChange(event){\n        let fieldName = event.target.name;\n        let fieldVal = event.target.value;\n        this.setState({[fieldName]: fieldVal});\n    }\n\n    handleSelect(event){\n        this.props.onDeviceChange(event);\n        this.setState({transaction: true});\n    }\n\n    render() {\n        let h;\n        if(this.state.transaction){\n            console.log(this.state);\n            return <Redirect to={\"/dashboard\"}/>;\n        }\n        else {\n            if(this.props.login_data.login_credentials.devices.length === 0){\n                h = (\n                    <div className={\"form-global\"}>\n                        <Form>\n                            <h3>New device?</h3>\n                            <Form.Group controlId=\"formBasicDevice\">\n                                <Form.Label>Device name</Form.Label>\n                                <Form.Control type={\"text\"} name={\"device\"}\n                                              onChange={this.handleChange.bind(this)}/>\n                            </Form.Group>\n\n                            <Button variant=\"primary\" onClick={() => this.handleSubmit()}>\n                                Register\n                            </Button>\n                        </Form>\n                    </div>\n                );\n            }\n            else{\n                let device_list = [];\n                for(var i=0; i<this.props.login_data.login_credentials.devices.length; i++){\n                    device_list.push(<ListGroup.Item eventKey={this.props.login_data.login_credentials.devices[i]}>{this.props.login_data.login_credentials.devices[i]}</ListGroup.Item>);\n                }\n                h = (\n                    <div className={\"form-global\"}>\n                        <h3>Which device is this?</h3>\n                        <ListGroup onSelect={this.handleSelect.bind(this)}>{device_list}</ListGroup>\n                        <Form>\n                            <h3>New device?</h3>\n                            <Form.Group controlId=\"formBasicDevice\">\n                                <Form.Label>Device name</Form.Label>\n                                <Form.Control type={\"text\"} name={\"device\"}\n                                              onChange={this.handleChange.bind(this)}/>\n                            </Form.Group>\n\n                            <Button variant=\"primary\" onClick={() => this.handleSubmit()}>\n                                Register\n                            </Button>\n                        </Form>\n                    </div>\n                );\n            }\n        }\n        return (\n            h\n        );\n    }\n}\n\n\nexport {DeviceSelection};",{"ruleId":"104","severity":1,"message":"105","line":7,"column":9,"nodeType":"106","messageId":"107","endLine":7,"endColumn":12},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"104","severity":1,"message":"112","line":5,"column":5,"nodeType":"106","messageId":"107","endLine":5,"endColumn":14},{"ruleId":"104","severity":1,"message":"113","line":6,"column":5,"nodeType":"106","messageId":"107","endLine":6,"endColumn":18},{"ruleId":"104","severity":1,"message":"114","line":2,"column":17,"nodeType":"106","messageId":"107","endLine":2,"endColumn":26},{"ruleId":"104","severity":1,"message":"115","line":2,"column":28,"nodeType":"106","messageId":"107","endLine":2,"endColumn":33},{"ruleId":"104","severity":1,"message":"116","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"117","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"104","severity":1,"message":"116","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"117","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"104","severity":1,"message":"116","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"117","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"104","severity":1,"message":"118","line":4,"column":17,"nodeType":"106","messageId":"107","endLine":4,"endColumn":20},{"ruleId":"104","severity":1,"message":"119","line":4,"column":54,"nodeType":"106","messageId":"107","endLine":4,"endColumn":57},{"ruleId":"104","severity":1,"message":"120","line":5,"column":9,"nodeType":"106","messageId":"107","endLine":5,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":283,"column":13,"nodeType":"123","messageId":"124","endLine":283,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":286,"column":13,"nodeType":"123","messageId":"124","endLine":286,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":289,"column":9,"nodeType":"123","messageId":"124","endLine":289,"endColumn":19},{"ruleId":"104","severity":1,"message":"125","line":6,"column":9,"nodeType":"106","messageId":"107","endLine":6,"endColumn":17},{"ruleId":"104","severity":1,"message":"126","line":9,"column":7,"nodeType":"106","messageId":"107","endLine":9,"endColumn":15},{"ruleId":"121","severity":1,"message":"122","line":22,"column":9,"nodeType":"123","messageId":"124","endLine":22,"endColumn":19},{"ruleId":"104","severity":1,"message":"127","line":5,"column":9,"nodeType":"106","messageId":"107","endLine":5,"endColumn":22},{"ruleId":"104","severity":1,"message":"128","line":71,"column":32,"nodeType":"106","messageId":"107","endLine":71,"endColumn":40},{"ruleId":"104","severity":1,"message":"129","line":71,"column":42,"nodeType":"106","messageId":"107","endLine":71,"endColumn":50},{"ruleId":"130","severity":1,"message":"131","line":80,"column":13,"nodeType":"132","messageId":"133","endLine":80,"endColumn":48},{"ruleId":"104","severity":1,"message":"134","line":2,"column":14,"nodeType":"106","messageId":"107","endLine":2,"endColumn":23},{"ruleId":"104","severity":1,"message":"127","line":4,"column":9,"nodeType":"106","messageId":"107","endLine":4,"endColumn":22},{"ruleId":"130","severity":1,"message":"131","line":45,"column":21,"nodeType":"132","messageId":"133","endLine":45,"endColumn":66},{"ruleId":"104","severity":1,"message":"128","line":71,"column":45,"nodeType":"106","messageId":"107","endLine":71,"endColumn":53},{"ruleId":"104","severity":1,"message":"129","line":71,"column":55,"nodeType":"106","messageId":"107","endLine":71,"endColumn":63},{"ruleId":"104","severity":1,"message":"135","line":71,"column":65,"nodeType":"106","messageId":"107","endLine":71,"endColumn":70},{"ruleId":"104","severity":1,"message":"127","line":5,"column":9,"nodeType":"106","messageId":"107","endLine":5,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":23,"column":9,"nodeType":"123","messageId":"124","endLine":23,"endColumn":19},"no-unused-vars","'Tmp' is defined but never used.","Identifier","unusedVar","no-native-reassign",["136"],"no-negated-in-lhs",["137"],"'useParams' is defined but never used.","'useRouteMatch' is defined but never used.","'Container' is defined but never used.","'Image' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'ArrowUpSquareFill' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Redirect' is defined but never used.","'ENDPOINT' is assigned a value but never used.","'LinkContainer' is defined but never used.","'username' is assigned a value but never used.","'password' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'ListGroup' is defined but never used.","'email' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]