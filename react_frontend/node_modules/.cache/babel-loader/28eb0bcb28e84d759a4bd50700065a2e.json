{"ast":null,"code":"var _jsxFileName = \"/home/falcon2212/college/sem8/SPE/final-project/window-drop/react_frontend/src/components/Dashboard.js\";\nimport React, { useState, useEffect, Component } from \"react\";\nimport \"./dashboard.css\";\nimport socketIOClient from \"socket.io-client\";\nimport { Button, Col, Container, FormFile, ListGroup, Row } from \"react-bootstrap\";\nimport { ArrowUpSquareFill } from \"react-bootstrap-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAXIMUM_MESSAGE_SIZE = 65535;\nconst END_OF_FILE_MESSAGE = 'EOF';\n\nconst {\n  arrayBufferWithMime,\n  arrayBufferMimeDecouple\n} = require('arraybuffer-mime');\n\nconst arrayBufferConcat = require('arraybuffer-concat');\n\nlet APP_CONFIG = require(\"../config/app_config\");\n\nconst ENDPOINT = APP_CONFIG.BACKEND_ENDPOINT;\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tmp = event => {};\n\n    this.state = {\n      configuration: {\n        'iceServers': [{\n          'urls': 'stun:stun.l.google.com:19302'\n        }]\n      },\n      room: null,\n      chunks: [],\n      clientList: [],\n      isInitiator: null,\n      clientId: null,\n      dest_id: null,\n      dataChannel: null,\n      connections: {},\n      datachannels: {},\n      online: null,\n      memberList: [],\n      file: null,\n      socket: null,\n      downloadList: null,\n      usernames: {}\n    };\n  }\n\n  renderClients() {\n    var onlineUsers = this.state.clientList.length === 0 ? 0 : this.state.clientList.length - 1;\n    this.setState({\n      online: onlineUsers\n    });\n    var html = [];\n\n    if (this.state.clientList.length === 1) {\n      this.setState({\n        memberList: html\n      });\n      return;\n    }\n\n    for (var i = 0; i < this.state.clientList.length; i++) {\n      var element = this.state.clientList[i];\n      if (element === this.state.clientId) continue;\n      html.push(element);\n      this.setState({\n        memberList: html\n      });\n    }\n  }\n\n  allConnect() {\n    this.setState({\n      connections: {}\n    });\n    this.setState({\n      datachannels: {}\n    });\n\n    for (let i = 0; i < this.state.clientList.length; i++) {\n      var element = this.state.clientList[i];\n      if (element === this.state.clientId) continue;\n      this.sendConnect(element);\n    }\n  }\n\n  async sendConnect(id) {\n    this.setState({\n      dest_id: id\n    });\n    this.setState({\n      isInitiator: true\n    });\n    this.state.socket.emit('sendConnect', this.state.dest_id, this.state.clientId, this.state.room, this.props.login_data.login_credentials.username);\n    return true;\n  }\n\n  t() {\n    console.log(Date.now());\n  }\n\n  createPeer(id) {\n    //var connect = document.getElementById('connect');\n    //connect.style.display = 'block';\n    let tmp = this.state.connections;\n    let tmp1 = this.state.datachannels;\n    tmp[id] = new RTCPeerConnection(this.state.configuration);\n\n    tmp[id].onicecandidate = event => {\n      if (event.candidate) {\n        this.sendMessage({\n          type: 'candidate',\n          label: event.candidate.sdpMLineIndex,\n          id: event.candidate.sdpMid,\n          candidate: event.candidate.candidate\n        }, id);\n      } else {}\n    };\n\n    this.setState({\n      connections: tmp\n    });\n\n    if (this.state.isInitiator) {\n      tmp1[id] = this.state.connections[id].createDataChannel('files');\n      tmp1[id].binaryType = 'arraybuffer';\n      this.setState({\n        datachannels: tmp1\n      });\n      this.onDataChannelCreated(id);\n      this.state.connections[id].createOffer().then(offer => {\n        return this.state.connections[id].setLocalDescription(offer);\n      }).then(() => {\n        this.sendMessage(this.state.connections[id].localDescription, id);\n      }).catch(this.logError);\n    } else {\n      tmp[id].ondatachannel = event => {\n        tmp1[id] = event.channel;\n        tmp1[id].binaryType = 'arraybuffer';\n        this.setState({\n          datachannels: tmp1\n        });\n        this.onDataChannelCreated(id);\n      };\n\n      this.setState({\n        connections: tmp\n      });\n    }\n  }\n\n  sendMessage(message, id) {\n    this.state.socket.emit('message', message, id, this.state.clientId);\n  }\n\n  onDataChannelCreated(id) {\n    let channel = this.state.datachannels;\n\n    channel[id].onopen = () => {};\n\n    channel[id].onclose = () => {// currentState.sendBtn = false;\n    };\n\n    channel[id].onmessage = async event => {\n      const {\n        data\n      } = event;\n\n      try {\n        if (data !== END_OF_FILE_MESSAGE) {\n          var tmp = this.state.chunks;\n          tmp.push(data);\n          this.setState({\n            chunks: tmp\n          });\n        } else {\n          let abWithMime = this.state.chunks.reduce((acc, arrayBuffer) => {\n            const tmp = new Uint8Array(acc.byteLength + arrayBuffer.byteLength);\n            tmp.set(new Uint8Array(acc), 0);\n            tmp.set(new Uint8Array(arrayBuffer), acc.byteLength);\n            return tmp;\n          }, new Uint8Array());\n          const {\n            mime,\n            arrayBuffer\n          } = arrayBufferMimeDecouple(abWithMime);\n          const blob = new Blob([arrayBuffer], {\n            type: mime\n          });\n          this.render1(blob, \"download\"); //channel.close();\n        }\n      } catch (err) {}\n    };\n\n    this.setState({\n      datachannels: channel\n    });\n  }\n\n  logError(err) {\n    if (!err) return;\n\n    if (typeof err === 'string') {\n      console.warn(err);\n    } else {\n      console.warn(err.toString(), err);\n    }\n  }\n\n  render1(blob, fileName) {\n    var html;\n    const url = window.URL.createObjectURL(blob);\n\n    if (url) {\n      html = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: url,\n            download: fileName,\n            children: \"Incoming file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 20\n      }, this);\n    } else {\n      html = /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No files available here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 20\n      }, this);\n    }\n\n    this.setState({\n      downloadList: html\n    });\n    this.setState({\n      chunks: []\n    });\n  }\n\n  signalingMessageCallback(message, id) {\n    if (message.type === 'offer') {\n      this.state.connections[id].setRemoteDescription(new RTCSessionDescription(message), () => {}, this.logError);\n      this.state.connections[id].createAnswer().then(answer => {\n        this.onLocalSessionCreated(answer, id);\n      }).catch(this.logError);\n    } else if (message.type === 'answer') {\n      this.state.connections[id].setRemoteDescription(new RTCSessionDescription(message), () => {}, this.logError);\n    } else if (message.type === 'candidate') {\n      this.state.connections[id].addIceCandidate(new RTCIceCandidate({\n        candidate: message.candidate,\n        sdpMLineIndex: message.label,\n        sdpMid: message.id\n      }));\n    }\n  }\n\n  onLocalSessionCreated(desc, id) {\n    this.state.connections[id].setLocalDescription(desc).then(() => {\n      this.sendMessage(this.state.connections[id].localDescription, id);\n    }).catch(this.logError);\n  }\n\n  async sendFile(ev) {\n    let id = ev.target.value; // for(var i=0; i<this.state.clientList.length; i++){\n    //     if(this.state.clientId === this.state.clientList[i]) continue;\n    //     else{\n    //         id = this.state.clientList[i];\n    //     }\n    // }\n    // var id = element.getAttribute(\"id\");\n    // var fileInput = document.getElementById('file')\n\n    var file = this.state.file;\n\n    if (file) {\n      let arrayBuffer = await file.arrayBuffer();\n      let mime = file.type;\n      let abWithMime = arrayBufferWithMime(arrayBuffer, mime);\n      let dataChannel = this.state.datachannels[id];\n\n      for (let i = 0; i < abWithMime.byteLength; i += MAXIMUM_MESSAGE_SIZE) {\n        dataChannel.send(abWithMime.slice(i, i + MAXIMUM_MESSAGE_SIZE));\n      }\n\n      dataChannel.send(END_OF_FILE_MESSAGE);\n    }\n  }\n\n  arrayBufferWithMime(arrayBuffer, mime) {\n    const len = mime.length;\n    const uint8 = new Uint8Array(len + 1);\n    uint8[0] = len;\n\n    for (var i = 0; i < len; i++) {\n      var n = mime[i].charCodeAt(0);\n      uint8[i + 1] = n;\n    }\n\n    const ab = arrayBufferConcat(uint8, arrayBuffer);\n    return ab;\n  }\n\n  arrayBufferMimeDecouple(arrayBufferWithMime) {\n    const uint8 = new Uint8Array(arrayBufferWithMime);\n    var mime = '';\n    const len = uint8[0];\n\n    for (var i = 0; i < len; i++) {\n      var char = uint8[i + 1];\n      mime += String.fromCharCode(char);\n    }\n\n    var arrayBuffer = uint8.slice(len + 1).buffer;\n    return {\n      mime: mime,\n      arrayBuffer: arrayBuffer\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.login_data.room);\n\n    if (this.props.login_data.room !== null) {\n      this.state.room = window.location.hash = this.props.login_data.room;\n    } else {\n      this.state.room = window.location.hash = \"1\";\n    }\n\n    this.state.socket = socketIOClient.connect(ENDPOINT, {\n      reconnect: true\n    });\n    this.state.socket.emit('create or join', this.state.room);\n    this.state.socket.on('Display clients', (clientsInRoom, isAllConnect) => {\n      this.setState({\n        clientList: clientsInRoom\n      });\n      this.renderClients();\n      if (isAllConnect) this.allConnect();\n    });\n    this.state.socket.on('ready', (dest_Id, username) => {\n      let users = this.state.usernames;\n      users[dest_Id] = username;\n      this.setState({\n        usernames: users\n      });\n      this.t();\n      this.createPeer(dest_Id);\n      this.t();\n    });\n    this.state.socket.on('reset', () => {\n      window.location.reload();\n    });\n    this.state.socket.on('sendConnect', (dest_Id, username) => {\n      let users = this.state.usernames;\n      users[dest_Id] = username;\n      this.setState({\n        usernames: users\n      });\n      this.setState({\n        dest_id: dest_Id\n      });\n      this.setState({\n        isInitiator: false\n      });\n      this.t();\n      this.createPeer(this.state.dest_id);\n      this.t();\n      this.state.socket.emit('ready', this.state.dest_id, this.state.clientId, this.props.login_data.login_credentials.username);\n      return true;\n    });\n    this.state.socket.on('socketid', id => {\n      this.setState({\n        clientId: id\n      });\n    });\n    this.state.socket.on('log', array => {});\n    this.state.socket.on('message', (message, id) => {\n      this.signalingMessageCallback(message, id);\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.socket.emit('final_step', this.state.room);\n  }\n\n  addFile(event) {\n    this.setState({\n      file: event.target.files[0]\n    });\n  }\n\n  createUserList() {\n    let html = [];\n\n    for (var i = 0; i < this.state.memberList.length; i++) {\n      html.push( /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        children: [this.state.usernames[this.state.memberList[i]], /*#__PURE__*/_jsxDEV(Button, {\n          value: this.state.memberList[i],\n          onClick: ev => this.sendFile(ev),\n          children: \"Send file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 69\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this));\n    }\n\n    return html;\n  }\n\n  render() {\n    let userList = this.createUserList();\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"justify-content-center mb-5 mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Users online: \", this.state.online]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(FormFile, {\n          onChange: e => {\n            this.addFile(e);\n          },\n          type: \"file\",\n          \"data-browse\": \"Select file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"downloadList\",\n          children: this.state.downloadList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: userList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport { Dashboard };","map":{"version":3,"sources":["/home/falcon2212/college/sem8/SPE/final-project/window-drop/react_frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","Component","socketIOClient","Button","Col","Container","FormFile","ListGroup","Row","ArrowUpSquareFill","MAXIMUM_MESSAGE_SIZE","END_OF_FILE_MESSAGE","arrayBufferWithMime","arrayBufferMimeDecouple","require","arrayBufferConcat","APP_CONFIG","ENDPOINT","BACKEND_ENDPOINT","Dashboard","constructor","props","tmp","event","state","configuration","room","chunks","clientList","isInitiator","clientId","dest_id","dataChannel","connections","datachannels","online","memberList","file","socket","downloadList","usernames","renderClients","onlineUsers","length","setState","html","i","element","push","allConnect","sendConnect","id","emit","login_data","login_credentials","username","t","console","log","Date","now","createPeer","tmp1","RTCPeerConnection","onicecandidate","candidate","sendMessage","type","label","sdpMLineIndex","sdpMid","createDataChannel","binaryType","onDataChannelCreated","createOffer","then","offer","setLocalDescription","localDescription","catch","logError","ondatachannel","channel","message","onopen","onclose","onmessage","data","abWithMime","reduce","acc","arrayBuffer","Uint8Array","byteLength","set","mime","blob","Blob","render1","err","warn","toString","fileName","url","window","URL","createObjectURL","signalingMessageCallback","setRemoteDescription","RTCSessionDescription","createAnswer","answer","onLocalSessionCreated","addIceCandidate","RTCIceCandidate","desc","sendFile","ev","target","value","send","slice","len","uint8","n","charCodeAt","ab","char","String","fromCharCode","buffer","componentDidMount","location","hash","connect","reconnect","on","clientsInRoom","isAllConnect","dest_Id","users","reload","array","componentWillUnmount","addFile","files","createUserList","render","userList","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\nimport \"./dashboard.css\";\nimport socketIOClient from \"socket.io-client\";\nimport {Button, Col, Container, FormFile, ListGroup, Row} from \"react-bootstrap\";\nimport {ArrowUpSquareFill} from \"react-bootstrap-icons\";\n\nconst MAXIMUM_MESSAGE_SIZE = 65535;\nconst END_OF_FILE_MESSAGE = 'EOF';\nconst {arrayBufferWithMime,arrayBufferMimeDecouple} = require('arraybuffer-mime');\nconst arrayBufferConcat = require('arraybuffer-concat')\n\nlet APP_CONFIG = require(\"../config/app_config\");\nconst ENDPOINT = APP_CONFIG.BACKEND_ENDPOINT;\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            configuration : {\n                'iceServers': [{\n                    'urls': 'stun:stun.l.google.com:19302'\n                }]\n            },\n            room:null,\n            chunks : [],\n            clientList: [],\n            isInitiator: null,\n            clientId: null,\n            dest_id: null,\n            dataChannel: null,\n            connections : {},\n            datachannels : {},\n            online: null,\n            memberList: [],\n            file:null,\n            socket:null,\n            downloadList:null,\n            usernames:{},\n        };\n    }\n\n    renderClients (){\n        var onlineUsers = ((this.state.clientList.length === 0) ? 0 : (this.state.clientList.length - 1) );\n\n        this.setState({online: onlineUsers});\n\n        var html = [];\n        if(this.state.clientList.length === 1)\n        {\n            this.setState({memberList: html});\n            return;\n        }\n\n        for(var i=0; i<this.state.clientList.length; i++)\n        {\n            var element = this.state.clientList[i];\n            if(element === this.state.clientId) continue;\n            html.push(element);\n            this.setState({memberList: html});\n\n        }\n    }\n\n    allConnect (){\n        this.setState({connections: {}});\n        this.setState({datachannels: {}});\n        for(let i = 0;i<this.state.clientList.length;i++){\n            var element = this.state.clientList[i];\n            if(element === this.state.clientId) continue;\n            this.sendConnect(element);\n        }\n    }\n\n    async sendConnect (id){\n        this.setState({dest_id: id});\n        this.setState({isInitiator: true});\n        this.state.socket.emit('sendConnect', this.state.dest_id, this.state.clientId, this.state.room, this.props.login_data.login_credentials.username);\n        return true;\n    }\n\n    t(){\n        console.log(Date.now());\n    }\n\n    createPeer(id){\n\n        //var connect = document.getElementById('connect');\n        //connect.style.display = 'block';\n\n        let tmp = this.state.connections;\n        let tmp1 = this.state.datachannels;\n        tmp[id] = new RTCPeerConnection(this.state.configuration);\n\n        tmp[id].onicecandidate = (event) => {\n            if (event.candidate) {\n                this.sendMessage({\n                    type: 'candidate',\n                    label: event.candidate.sdpMLineIndex,\n                    id: event.candidate.sdpMid,\n                    candidate: event.candidate.candidate\n                },id);\n            } else {\n            }\n        };\n        this.setState({connections:tmp});\n\n        if (this.state.isInitiator) {\n            tmp1[id] = this.state.connections[id].createDataChannel('files');\n            tmp1[id].binaryType = 'arraybuffer';\n            this.setState({datachannels: tmp1});\n            this.onDataChannelCreated(id);\n\n            this.state.connections[id].createOffer().then((offer) => {\n                return this.state.connections[id].setLocalDescription(offer);\n            })\n                .then(() => {\n                    this.sendMessage(this.state.connections[id].localDescription, id);\n                })\n                .catch(this.logError);\n\n        } else {\n            tmp[id].ondatachannel = (event) => {\n                tmp1[id] = event.channel;\n                tmp1[id].binaryType = 'arraybuffer';\n                this.setState({datachannels: tmp1});\n                this.onDataChannelCreated(id);\n            };\n            this.setState({connections:tmp});\n        }\n    }\n\n    sendMessage (message, id) {\n        this.state.socket.emit('message', message, id, this.state.clientId);\n    }\n\n    onDataChannelCreated (id){\n\n        let channel = this.state.datachannels;\n        channel[id].onopen = () => {\n        };\n\n        channel[id].onclose = () => {\n            // currentState.sendBtn = false;\n        }\n\n        channel[id].onmessage = async (event) => {\n            const { data } = event;\n            try {\n                if (data !== END_OF_FILE_MESSAGE) {\n                    var tmp = this.state.chunks;\n                    tmp.push(data);\n                    this.setState({chunks:tmp});\n                } else {\n                    let abWithMime = this.state.chunks.reduce((acc, arrayBuffer) => {\n                        const tmp = new Uint8Array(acc.byteLength + arrayBuffer.byteLength);\n                        tmp.set(new Uint8Array(acc), 0);\n                        tmp.set(new Uint8Array(arrayBuffer), acc.byteLength);\n                        return tmp;\n                    }, new Uint8Array());\n                    const {mime, arrayBuffer} = arrayBufferMimeDecouple(abWithMime)\n                    const blob = new Blob([arrayBuffer], {type : mime});\n                    this.render1(blob, \"download\");\n                    //channel.close();\n                }\n            } catch (err) {\n            }\n        };\n        this.setState({datachannels: channel});\n    };\n\n    logError (err) {\n        if (!err) return;\n        if (typeof err === 'string') {\n            console.warn(err);\n        } else {\n            console.warn(err.toString(), err);\n        }\n    }\n\n    render1 (blob, fileName){\n        var html;\n        const url = window.URL.createObjectURL(blob);\n        if(url)\n        {\n            html = <li><small><a href={url} download={fileName}>Incoming file</a></small></li> ;\n        }\n        else\n        {\n            html = <li>No files available here</li>;\n        }\n        this.setState({downloadList: html});\n        this.setState({chunks: []});\n    }\n\n    signalingMessageCallback (message, id) {\n        if (message.type === 'offer') {\n            this.state.connections[id].setRemoteDescription(new RTCSessionDescription(message), () => {},\n                this.logError);\n            this.state.connections[id].createAnswer().then((answer) => {\n                this.onLocalSessionCreated(answer,id);\n            }).catch(this.logError);\n        } else if (message.type === 'answer') {\n            this.state.connections[id].setRemoteDescription(new RTCSessionDescription(message), () => {},\n                this.logError);\n        } else if (message.type === 'candidate') {\n            this.state.connections[id].addIceCandidate(new RTCIceCandidate({\n                candidate: message.candidate,\n                sdpMLineIndex: message.label,\n                sdpMid: message.id\n            }));\n        }\n    }\n\n    onLocalSessionCreated (desc,id) {\n        this.state.connections[id].setLocalDescription(desc).then(() => {\n            this.sendMessage(this.state.connections[id].localDescription, id);\n        }).catch(this.logError);\n    }\n\n    async sendFile(ev){\n        let id = ev.target.value;\n        // for(var i=0; i<this.state.clientList.length; i++){\n        //     if(this.state.clientId === this.state.clientList[i]) continue;\n        //     else{\n        //         id = this.state.clientList[i];\n        //     }\n        // }\n        // var id = element.getAttribute(\"id\");\n        // var fileInput = document.getElementById('file')\n        var file = this.state.file;\n\n        if(file){\n            let arrayBuffer = await file.arrayBuffer();\n            let mime = file.type;\n            let abWithMime = arrayBufferWithMime(arrayBuffer, mime)\n            let dataChannel = this.state.datachannels[id];\n\n            for (let i = 0; i < abWithMime.byteLength; i += MAXIMUM_MESSAGE_SIZE) {\n                dataChannel.send(abWithMime.slice(i, i + MAXIMUM_MESSAGE_SIZE));\n            }\n            dataChannel.send(END_OF_FILE_MESSAGE);\n        }\n    }\n\n    arrayBufferWithMime(arrayBuffer, mime) {\n        const len = mime.length\n        const uint8 = new Uint8Array(len + 1)\n\n        uint8[0] = len\n\n        for (var i = 0; i < len; i++) {\n            var n = mime[i].charCodeAt(0)\n            uint8[i+1] = n\n        }\n\n        const ab = arrayBufferConcat(uint8, arrayBuffer)\n\n        return ab\n    }\n\n    arrayBufferMimeDecouple(arrayBufferWithMime) {\n        const uint8 = new Uint8Array(arrayBufferWithMime)\n        var mime = ''\n        const len = uint8[0]\n\n        for (var i = 0; i < len; i++) {\n            var char = uint8[i+1]\n\n            mime += String.fromCharCode(char)\n        }\n\n        var arrayBuffer = uint8.slice(len+1).buffer\n\n        return {\n            mime: mime,\n            arrayBuffer: arrayBuffer\n        }\n    }\n\n    componentDidMount() {\n        console.log(this.props.login_data.room)\n        if (this.props.login_data.room !== null) {\n            this.state.room = window.location.hash = this.props.login_data.room;\n        }\n        else {\n            this.state.room = window.location.hash = \"1\";\n        }\n\n        this.state.socket = socketIOClient.connect(ENDPOINT, {reconnect: true});\n\n        this.state.socket.emit('create or join', this.state.room);\n\n        this.state.socket.on('Display clients', (clientsInRoom, isAllConnect) => {\n            this.setState({clientList: clientsInRoom});\n            this.renderClients();\n            if(isAllConnect) this.allConnect();\n        });\n\n        this.state.socket.on('ready', (dest_Id, username) => {\n\n            let users = this.state.usernames;\n            users[dest_Id] = username;\n            this.setState({usernames: users});\n\n            this.t();\n            this.createPeer(dest_Id);\n            this.t();\n        });\n\n        this.state.socket.on('reset', () => {\n            window.location.reload();\n        });\n\n        this.state.socket.on('sendConnect', (dest_Id, username) => {\n\n            let users = this.state.usernames;\n            users[dest_Id] = username;\n            this.setState({usernames: users});\n\n            this.setState({dest_id: dest_Id});\n            this.setState({isInitiator: false});\n            this.t();\n            this.createPeer(this.state.dest_id);\n            this.t();\n            this.state.socket.emit('ready', this.state.dest_id, this.state.clientId, this.props.login_data.login_credentials.username);\n            return true;\n        });\n\n        this.state.socket.on('socketid', (id) => {\n            this.setState({clientId: id});\n        });\n\n        this.state.socket.on('log', (array) => {\n        });\n\n        this.state.socket.on('message', (message, id) => {\n            this.signalingMessageCallback(message, id);\n        });\n    }\n\n    componentWillUnmount() {\n        this.state.socket.emit('final_step', this.state.room);\n    }\n\n    addFile(event){\n        this.setState({file: event.target.files[0]});\n    }\n\n    tmp = (event) => {\n    }\n    createUserList() {\n        let html = [];\n        for(var i=0; i<this.state.memberList.length; i++){\n            html.push(\n                <ListGroup.Item>\n                    {this.state.usernames[this.state.memberList[i]]}<Button value={this.state.memberList[i]} onClick={(ev) => this.sendFile(ev)}>Send file</Button>\n                    {/*<Row className={\"p-2\"}>*/}\n                    {/*    <Col>{this.state.memberList[i]}</Col>*/}\n                    {/*    /!*<Col><Form.File onChange={(e) => {this.addFile(e)}} type={\"file\"} className={\"custom-file-label\"} label={this.state.memberList[i]} custom/></Col>*!/*/}\n                    {/*    <Col className={\"justify-content-end\"}><Button value={this.state.memberList[i]} onClick={(ev) => this.sendFile(ev.target.value)}/></Col>*/}\n                    {/*</Row>*/}\n                </ListGroup.Item>\n            );\n        }\n        return html;\n    }\n\n    render() {\n        let userList = this.createUserList();\n        return(\n            <Container className={\"justify-content-center mb-5 mt-5\"}>\n                <div>\n                    Users online: {this.state.online}\n                </div>\n                <div>\n                    {/*<FormFile onChange={(e) => {this.addFile(e)}} type={\"file\"} className={\"custom-file-label\"} label={\"Select file\"} custom/>*/}\n                    <FormFile onChange={(e) => {this.addFile(e)}} type={\"file\"} data-browse={\"Select file\"}/>\n                    <ul id=\"downloadList\">{this.state.downloadList}</ul>\n                </div>\n                <ListGroup>\n                    {userList}\n                </ListGroup>\n            </Container>\n        );\n    }\n}\n\nexport {Dashboard};\n\n"]},"metadata":{},"sourceType":"module"}