#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-backend:server');
var http = require('http');
const socketIo = require("socket.io");

let Sessions = require('../models/session.model');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketIo(server, {
  cors: {
    origin: "*:",
  }
});

/**
 * Socket server.
 */

// let interval;
//
// io.on("connection", (socket) => {
//   console.log("New client connected");
//   if (interval) {
//     clearInterval(interval);
//   }
//   interval = setInterval(() => getApiAndEmit(socket), 1000);
//   socket.on("disconnect", () => {
//     console.log("Client disconnected");
//     clearInterval(interval);
//   });
// });

io.on('connection', function(socket) {

  function log() {
    // var array = ['Message from server:'];
    // array.push.apply(array, arguments);
    // socket.emit('log', array);
    console.log(arguments);
  }

  socket.on('message',function(message, clientId, id) {
    console.log("Listener: message");
    io.to(clientId).emit('message', message, id);
  })

  socket.on('sendConnect', function(dest_Id, clientId, room, username){
    console.log("Listener: sendConnect");
    io.to(dest_Id).emit('sendConnect', clientId, username);
    //io.sockets.in(room).emit('ready', room);
    //socket.broadcast.emit('ready', room);
  })

  socket.on('reset', function(room){
    console.log("Listener: reset");
    io.sockets.in(room).emit('reset');
  })

  socket.on('ready', function(dest_Id, clientId, username){
    console.log("Listener: ready");
    log("Ready in server");
    io.to(dest_Id).emit('ready', clientId, username);
  })

  socket.on('create or join', async (uname, dev) => {
    console.log("Listener: create or join");
    // log('Received request to create or join room ' + room);

    let room;
    let users = await Sessions.find({username: uname});
    if(users.length !==0){
      room = users[0].room;
    }
    else{
      room = Math.floor((1 + Math.random()) * 1e16).toString(16).substring(1);
    }


    console.log('Received request to create or join room ' + room);
    var clientsInRoom = io.sockets.adapter.rooms[room];
    var numClients = clientsInRoom ? Object.keys(clientsInRoom.sockets).length : 0;
    console.log('Room ' + room + ' now has ' + numClients + ' client(s) and socketid is' + socket.id);

    if(numClients<5)
    {
      socket.join(room);
      console.log("Joined Successfully");
      socket.emit('socketid', socket.id);
      clientsInRoom = io.sockets.adapter.rooms[room];
      let tmp = Object.keys(clientsInRoom.sockets);
      socket.emit('Display clients', users, true);
      for(var i=0; i<tmp.length; i++){
        console.log(tmp[i], socket.id);
        if(tmp[i] !== socket.id) {
          io.to(tmp[i]).emit('Display clients', Object.keys(clientsInRoom.sockets), false);
        }
      }
    }
    else
    {
      log("Room is full");
    }
  })

  socket.on('final_step', (room) => {
    console.log('Listener: disconnect', room);
    let clientsInRoom = io.sockets.adapter.rooms[room];
    let tmp = Object.keys(clientsInRoom.sockets);
    let tmp1 = [];
    for(var i=0; i<tmp.length; i++){
      if(tmp[i] !== socket.id){
        tmp1.push(tmp[i]);
      }
    }
    for(var i=0; i<tmp1.length; i++){
      console.log(tmp1[i], socket.id);
      io.to(tmp1[i]).emit('Display clients', tmp1, false);
    }
  })

})


// const getApiAndEmit = socket => {
//   const response = new Date();
//   // Emitting a new message. Will be consumed by the client
//   socket.emit("FromAPI", response);
// };

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
